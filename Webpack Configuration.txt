Initial Stage
=============================

1. Start with a structure of "dist" and "src". Inside the "src" I have an App.js (or something), a favicon for the website, style folder for styles and a main style.css which will import all the other modules.

DayTwo has SRC: js, scss, img, library

2. npm init -y To instantly start our npm without answering the intro questions. The package.json file will help us manage all our dependencies.
	- Here we can npm install lodash and npm install normalize.css

3. To install Webpack, use npm install webpack webpack-cli --save-dev
After, we need to create our configuration file: webpack.config.js

We also need to write some initial code to our config file. 

4. We need to do some initial basic setup now. First, we create the path: const path = require("path");
Then we create the initial module.exports = {} 
module.exports = {
	entry: {
        main: path.resolve(__dirname, 'src/scripts/main.js')
    },
    output: {
        filename: 'bundled.js', -- we can say [name].bundled.js if we want to here and it will use the entry name
        path: path.resolve(__dirname, 'dist') -- we can change this to src if we don't want to send the file to a new folder.
    },
	mode: "development", //production
}

And lastly we can make a webpack script to test it. 
    "dev": "webpack-dev-server",
    "build": "webpack",

CSS 
=====

1. Let's add basic CSS support to Webpack
npm install css-loader style-loader --save-dev

2. Import the style into your main JS file
import "../styles/styles.css";

3. A new addition to 
module.exports = {
     module: {
        rules: [
            {
                test: /\.css$/,
                use: ['style-loader', 'css-loader']
            } -- this tests for .css files and uses css-loader and style-loader for our CSS
        ]
    }
}

SCSS
=========

1. Let's add SCSS now to our Webpack
npm install sass sass-loader

2. We change the test name from .css to .scss, rename our styles.css to styles.scss, update the import in our main JS file and add a new loader to our webpack config.
module: {
    rules: [
        {
            test: /\.scss$/,
            use: ['style-loader', 'css-loader', 'sass-loader']
        }
    ]
}

Webpack Development Server
=========================

1. npm install webpack-dev-server --save-dev 

2. Setting up a Development Tool

2.1 Watch. We can make a watch script "watch": "webpack --watch" or set watch: true,  in our module.exports in case we don't want to use dev server

2.2 Using Webpack Dev Server

We setup a new object in our webpack.config
devServer: {
    static: path.join(__dirname, 'dist' -- or src depending),
    open: true, -- so it opens our browser automatically
    hot: true, -- this injects the css/js in the browsers memory without reloading
    port: 3000,
    host: '0.0.0.0' -- this allows devices on our network to view the website
}

3. Accept the hot module updates in our main.js file
if(module.hot) {
    module.hot.accept();
}

4. In our webpack.config we add an object called devtool:'inline-source-map' to track our errors when we bundle.

Development Tools
=================

1. npm install normalize.css
@import "normalize.css"; in main styles.scss

2. npm install postcss postcss-loader --save-dev
npm install autoprefixer --save-dev 
module: {
    rules: [
        {
            test: /\.scss$/i,
            use: ['style-loader', 'css-loader', 'sass-loader',
                {
                    loader: 'postcss-loader',
                    options: {
                        postcssOptions: {
                            plugins: [
                                [
                                    "autoprefixer"
                                ]
                            ]
                        }
                    }
                }
            ]
        }
    ]
}

Basic structure
====================
@import "normalize.css";
@import "base/variables";
@import "base/mixins";
@import "base/wrapper";

@import "modules/site-header";
@import "modules/primary-nav";
@import "modules/site-footer";


Production
============
1. First in our webpack config file we need to determine which script we ran, npm dev or build. To do that we use
const currentTask = process.env.npm_lifecycle_event;

2. There are multiple ways we can do that, but probably the easiest would be to make a config variable with everything we have in module.exports, set module.exports = config, and make an if statement for the build task and modify the config variable to apply for the build only

config = {
    entire module.exports here
}
if(currentTask == "build") {
    ...
}
module.exports = config;


3. Optimization - download less code

config.optimization = {
    splitChunks: {chunks: "all"}
} - This is for code we didn't write but we use life for example some lazy load library etc.

Hash output for Build:
config.output = {
    filename: "[name].[chunkhash].js",
    chunkFilename: "[name].[chunkhash].js",
    path: path.resolve(__dirname, 'dist'),
    clean: true
}

4. Extract CSS
=================

npm install mini-css-extract-plugin --save-dev
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
build: 
config.module.rules[0].use[0] = MiniCssExtractPlugin.loader
config.plugins.push(
    new MiniCssExtractPlugin({filename: 'styles.[chunkhash].css'}),
)

Minify: npm install css-minimizer-webpack-plugin --save-dev
const CssMinimizerPlugin = require("css-minimizer-webpack-plugin");
optimization: 
minimizer: [
    new CssMinimizerPlugin()
]

